%{
#include <stdio.h>
#include <string.h>
#include "htable.h"
#include "arrayList.h"

TAD_HTABLE h;
int indice;
char* frase;
int nova;
void faztraducao(char* str);
%}

%option yylineno
%option noyywrap

CP [:\ ªº/!ñàáâåãòóçõéèôōöêíìúüùß',;\.ØÚÙÛÓÔÒÌÎÍÀÂÁÊÉÈ\\-]+
LETRAS [A-Za-z:\ |á|è|í|ó|ú|á|é|í|ó|ú|ã|õ|ç|ş]
NUMEROS [0-9]+ 

%%

"<title>".*:         							    {;}
"<title>"           							    {;}
"</title>\n"										{;}
"<id>"   										    {;}
"</id>\n"											{;}
"--\n"												{;}
"<title>"({LETRAS}+{NUMEROS})+                      {;}
"<title>"{LETRAS}+                                  {
                                                     int x = strlen(yytext)-6;
                                                     frase = (char*) malloc(x*sizeof(char));
                                                     sprintf(frase,"%s",yytext+7);
                                                     frase[x] = '\0';
                                                     nova = 1;
                                                    } // não precisamos de caracteres especiais
"<id>"{NUMEROS}+                                    {
                                                     if(nova != 0){
                                                        int x = atoi(yytext+4);
                                                        add(frase,x,h);
                                                        printf("%d,%s\n",x,(char*)getDados(h,x));
                                                     } 
                                                     nova=0;
                                                    }
(\({NUMEROS},\'en\',\'{LETRAS}+\'\)(,|;))?			{faztraducao(yytext+1,"en");}
(\({NUMEROS},\'es\',\'{LETRAS}+\'\)(,|;))?			{faztraducao(yytext+1,"es");}
(\({NUMEROS},\'de\',\'{LETRAS}+\'\)(,|;))?			{faztraducao(yytext+1,"de");}
(\({NUMEROS},\'fr\',\'{LETRAS}+\'\)(,|;))?			{faztraducao(yytext+1,"fr");}
(\({NUMEROS},\'it\',\'{LETRAS}+\'\)(,|;))?			{faztraducao(yytext+1,"it");}
(\({NUMEROS},\'ru\',\'{LETRAS}+\'\)(,|;))?			{faztraducao(yytext+1,"ru");}
(.|\n)    											{;}

%%

void retiraExcesso(char* str) {
	int j;
	for(j = indice; str[j]!='\0' ; j++) {
		if(str[j]==':') break;
	}
	if(str[j]!='\0') {
		j++;
		int i = indice+1;
		for(; str[j]!='\0' ; j++, i++)
			str[i] = str[j];
		str[i] = '\0';
	}
}

int getId(char* str) {
	int i = 0;
	for(; str[i]!='\0'; i++)
		if(str[i]==',') break;
	indice = i;
	char* tmp = malloc(sizeof(char)*(i+1));
	strncpy(tmp,str,i);
	tmp[i] = '\0';
	i = atoi(tmp);
	free(tmp);
	return i;
}

char* getdados(char* str) {
	char* res = malloc(sizeof(char)*strlen(str+indice));
	strcpy(res,str+indice);
	return res;
}

void addLang(TAD_ARRAY_LIST array, char* lang, char* str) {
	if(strcmp(lang,"en")) {
		addElemAtIndex(array,str,0);
	}
	else if(strcmp(lang,"es")) {
		addElemAtIndex(array,str,1);
	}
	else if(strcmp(lang,"fr")) {
		addElemAtIndex(array,str,2);
	}
	else if(strcmp(lang,"ru")) {
		addElemAtIndex(array,str,3);
	}
	else if(strcmp(lang,"it")) {
		addElemAtIndex(array,str,4);
	}
	else if(strcmp(lang,"de")) {
		addElemAtIndex(array,str,5);
	}
	else addElemAtIndex(array,str,6);
}

void faztraducao(char* str,char* lang) {
	str[strlen(str)-2]='\0';
	int id = getId(str);
	index+=5;
	retiraExcesso(str);
	char* dados = getdados(str);
	TAD_ARRAY_LIST array = getDados(h,id);
	if(array != null)
		addLang(array,lang,dados);
}

int main(int argc,char* argv[]) {
	h = Htable((long)1);
    nova = 0;

	printf("Inicio da filtragem\n");

	for(int i = 1; i<argc ; i++) {	
		yyin = fopen(argv[i],"r");
   	 	yylex();
   		fclose(yyin);
    }

	printf("Fim da filtragem\n");

	FILE* f = fopen("output.txt","w");
	int dim = getHtableSize(h);
	for(int i = 0; i<dim; i++) {
		TAD_ARRAY_LIST array = (TAD_ARRAY_LIST)getDados(h,i);
		if(array) {
			for(int j = 0 ; j<6 ; j++) {
				char* str = (char*)getElem(array,j);
				if(str != NULL) {
					fprintf(f,"%ld,%s,%s\n",getIdAtIndex(h,i),(char*)getElem(array,6),str);
				}
			}
		}
		free_ARRAY_LIST(array);
	}

	free_htable(h);
	fclose(f);

	return 0;
}