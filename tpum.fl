%{
#include <stdio.h>
#include<string.h>
#include "htable.h"
#include "htable.c"

typedef struct DADOS {
	char* es;
	char* en;
	char* it;
	char* ru;
	char* de;
	char* fr;
	char* pt;
}DADOS;

TAD_HTABLE h;
char* tmp;
int index;
char* frase;
int nova;
void fazcoisas(char* str);
%}

%option yylineno
%option noyywrap

CP [: ªº/!ñàáâåãòóçõéèôōöêíìúüùß',;\.ØÚÙÛÓÔÒÌÎÍÀÂÁÊÉÈ\\-]+
LETRAS [A-Za-z\ |á|è|í|ó|ú|á|é|í|ó|ú|ã|õ|ç|ş]
NUMEROS [0-9]+ 
LINGUA (de|en|fr|it|ru|es)
PARAGRAFOS (\n)
ESPACO [\ ]

%%

"<title>".*:         							    {;}
"<title>"           							    {;}
"</title>\n"										{;}
"<id>"   										    {;}
"</id>\n"											{;}
"--\n"												{;}
"<title>"({LETRAS}+{NUMEROS})+                      {;}
"<title>"{LETRAS}+                                  {
                                                     int x = strlen(yytext)-6;
                                                     frase = (char*) malloc(x*sizeof(char));
                                                     sprintf(frase,"%s",yytext+7);
                                                     frase[x] = '\0';
                                                     nova = 1;
                                                    } // não precisamos de caracteres especiais
"<id>"{NUMEROS}+                                    {
                                                     if(nova != 0){
                                                        int x = atoi(yytext+4);
                                                        add(frase,x,h);
                                                        printf("%d,%s\n",x,(char*)getDados(h,x));
                                                     } 
                                                     nova=0;
                                                    }
(\({NUMEROS},{CP}{LINGUA}{CP},{CP}+\){CP})?			{faztraducao(yytext+1);}
(.|\n)												{}

%%

void retiraExcesso(char* str) {
	int j;
	for(j = index; str[j]!='\0' ; j++) {
		if(str[j]==':') break;
	}
	if(str[j]!='\0') {
		j++;
		int i = index+1;
		for(; str[j]!='\0' ; j++, i++)
			str[i] = str[j];
		str[i] = '\0';
	}
}

int getId(char* str) {
	int i = 0;
	for(; str[i]!='\0'; i++)
		if(str[i]==',') break;
	index = i;
	char* tmp;
	strncpy(tmp,str,i);
	tmp[i] = '\0';
	i = atoi(tmp);
	free(tmp);
	return i;
}

char* getLang(char* str) {
	index+=2;
	char* res = malloc(sizeof(char)*3);
	res[0] = str[index];
	res[1] = str[index+1];
	res[2] = '\0';
	index+=3;
	return res;
}

char* getdados(char* str) {
	char* res = malloc(sizeof(char)*strlen(str+index));
	strcpy(res,str+index);
	return res;
}

void addLang(DADOS d, char* lang, char* str) {
	if(strcmp(lang,"en")) {
		strcpy(dados->en,str);
	}
	else if(strcmp(lang,"es")) {
		strcpy(dados->es,str);
	}
	else if(strcmp(lang,"fr")) {
		strcpy(dados->fr,str);
	}
	else if(strcmp(lang,"ru")) {
		strcpy(dados->ru,str);
	}
	else if(strcmp(lang,"it")) {
		strcpy(dados->it,str);
	}
	else {
		strcpy(dados->de,str);
	}
}

void faztraducao(char* str) {
	str[strlen(str)-2]='\0';
	int id = getId(str);
	char* lang = getLang(str);
	retiraExcesso(str);
	char* dados = getdados(str);
	DADOS d = getDados(h,id);
	addLang(d,lang,dados);
}

int main(int argc,char* argv[]) {
	h = Htable((long)1);
    nova = 0;

	printf("Inicio da filtragem\n");

	for(int i = 1; i<argc ; i++) {	
		yyin = fopen(argv[i],"r");
   	 	yylex();
   		fclose(yyin);
    }

	printf("Fim da filtragem\n");

	FILE* f = fopen("output.txt","w");
	//printar a estrutura toda para o ficheiro

	fclose(f);

	return 0;
}